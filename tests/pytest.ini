"""
Introduction
The pytest.ini file is a configuration file for pytest. This file allows customizing the behavior of pytest,
defining custom markers, configuration options, and more, to suit the specific needs of your project.

Structure and Example
[pytest]: The main section where all pytest configurations are defined.
markers: Defines custom markers that can be used to categorize tests. In this case, a marker named asyncio is defined, which can be used to mark tests that use asyncio.

Available Configurations
Besides markers, pytest.ini can contain several other configurations, including:

addopts: Allows specifying default command-line options for pytest.
testpaths: Specifies directories that pytest should search for tests.
python_files: Defines the patterns of file names that pytest will consider as test files.
python_classes: Specifies the patterns of class names that pytest will treat as test classes.
python_functions: Defines the patterns of function names that pytest will consider as test functions.
filterwarnings: Allows specifying how pytest should treat Python warnings during test execution.
These configurations provide great flexibility to tailor pytest to the specific needs of your project, facilitating the execution and organization of your tests.

"""
[pytest]
markers =
    development: marks tests as development (deselect with '-m "not development"')
    production: marks tests as production (deselect with '-m "not production"')
    fast: marks tests as fast (run with '-m fast')
    slow: marks tests as slow (run with '-m slow')
    custom: custom marker example (run with '-m custom')
    asyncio: marks tests requiring asyncio (run with pytest-asyncio plugin)
    xfail: marks tests that are expected to fail (handled by pytest itself)
    xpass: marks tests that unexpectedly pass after being marked xfail (handled by pytest itself)
    parameters: marks parameterized tests (handled by pytest itself)
    benchmark: marks tests used for benchmarking (handled by pytest-benchmark plugin)
    celery: marks tests related to Celery tasks (custom marker, specifics depend on test implementation)
    login: dummy login marker for grouping test
    signup: dummy signup marker for grouping test
    marker1: combined markers
    marker2: combined markers
    timeout: test with timeout
